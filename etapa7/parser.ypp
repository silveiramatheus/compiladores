%{
    // UFRGS - Compiladores - Professor Marcelo Johann - 2024/2
    // Matheus Silveira e Tiago Binz
    // Etapa 7

    #include "ast.hpp"
    #include "symbols.hpp"
    #include "semantic.hpp"
    #include "tac.hpp"
    #include <string>
    #include "asm.hpp"

    int yylex();
    int yyerror(string msg);
    extern int getLineNumber();

    AST* topLevelTree = nullptr;
    bool areThereSyntaxErrors = false;

    void printAST()
    {
        fprintf(stderr, "==================== Abstract Syntax Tree ====================\n");
        AST::print(topLevelTree, 0);
    }

    void decompileAST(std::string fileName)
    {
        fprintf(stderr, "==================== Decompiling AST ====================\n");
        AST::decompileToFile(topLevelTree, fileName);
        fprintf(stderr, "Done! Output in file %s.\n", fileName.c_str());
    }

    int runSemanticTests()
    {
        fprintf(stderr, "==================== Semantic Verifications ====================\n");
        checkAndSetDeclarations(topLevelTree);
        checkUndeclared();
        checkOperands(topLevelTree);
        checkSymbolUsages(topLevelTree);
        checkAssignations(topLevelTree);
        checkFunctionCalls(topLevelTree);
        return getSemanticErrors();
    }

    void generateCode(bool print, bool optimize)
    {
        auto TAC_list = TAC::generateCode(topLevelTree);
        if (print)
        {
            fprintf(stderr, "==================== Three Address Code (Raw) ====================\n");
            TAC::printList(TAC_list);
        }

        if (optimize)
        {
            if (print)
            {
                fprintf(stderr, "==================== Optimizations ====================\n");
                fprintf(stderr, "Identifying basic blocks...\n");
            }
            auto basicBlocks = TAC::findBasicBlocks(TAC_list);

            if (print)
                TAC::printBasicBlocks(basicBlocks, TAC_list);

            if (print)
                fprintf(stderr, "Applying constant folding...\n");

            int removedInstructions = 0;
            TAC::optimize_constantFolding(basicBlocks, TAC_list, removedInstructions);

            if (print)
            {
                fprintf(stderr, "Removed %d instructions.\n", removedInstructions);
                fprintf(stderr, "New TAC list:\n");
                TAC::printList(TAC_list);
            }
        }

        if (print)
            fprintf(stderr, "==================== Generate ASM ====================\n");
        generateAsm(TAC_list, topLevelTree);
    }

    void reportSyntaxError(std::string message)
    {
        fprintf(stderr, "%s\n", message.c_str());
    }
%}

%union
{
	AST* ast;
	Symbol* symbol;
};

%token KW_CHAR         
%token KW_INT           
%token KW_IF             
%token KW_THEN           
%token KW_ELSE           
%token KW_WHILE          
%token KW_READ           
%token KW_PRINT          
%token KW_RETURN         
%token<symbol> TK_IDENTIFIER     
%token<symbol> LIT_INT           
%token<symbol> LIT_CHAR          
%token<symbol> LIT_STRING        
%token TOKEN_ERROR

%type<ast> exp
%type<ast> expliteral
%type<ast> indexed_exp
%type<ast> call_exp
%type<ast> lexp
%type<ast> commalexp_tail
%type<ast> block
%type<ast> lcmd
%type<ast> cmd
%type<ast> lprint
%type<ast> literal
%type<ast> ldefs
%type<ast> def
%type<ast> vardef
%type<ast> functiondef
%type<ast> param
%type<ast> lparameter
%type<ast> paramstail
%type<ast> type
%type<ast> vectordef
%type<ast> vectordef_initialized
%type<ast> lliteral
%type<ast> elem
%type<ast> vectorsize

%left '&' '|'
%left '<' '>' '='
%left '+' '-'
%left '*' '/'
%left '~'

%nonassoc NO_ELSE
%nonassoc KW_ELSE
%%

program: ldefs      { topLevelTree = $1; }
    ;

ldefs: def ldefs    { $$ = AST::createNode(AST_LDEF, {$1, $2}); }
    |               { $$ = 0; }
    ;

def:
    error ';' { $$ = 0; reportSyntaxError("Invalid definition."); }
    | vardef
    | functiondef
    ;

vardef:
    type TK_IDENTIFIER '=' exp ';'          { $$ = AST::createNode(AST_VARDEF, {$1, $4}, $2); }
    | type TK_IDENTIFIER '=' exp error      { $$ = AST::createNode(AST_VARDEF, {$1, $4}, $2); reportSyntaxError("Expected \';\'"); }
    | vectordef ';'
    ;

functiondef:
    type TK_IDENTIFIER '(' lparameter ')' block         { $$ = AST::createNode(AST_FUNDEF, {$1, $4, $6}, $2); }
    | type TK_IDENTIFIER error block                    { $$ = 0; reportSyntaxError("Invalid function parameters."); }
    ;

lparameter: param paramstail    { $$ = AST::createNode(AST_LPARAM, {$1, $2}); }
    |                           { $$ = 0; }
    ;

param: type TK_IDENTIFIER   { $$ = AST::createNode(AST_PARAM, {$1}, $2); }
    ;

paramstail: ',' lparameter    { $$ = $2; }
    | error lparameter        { $$ = 0; reportSyntaxError("Expected \',\'"); }
    |                         { $$ = 0; }
    ;

block: '{' lcmd '}'     { $$ = AST::createNode(AST_BLOCK, {$2}); }
    ;

lcmd: cmd lcmd  { $$ = AST::createNode(AST_LCMD, {$1, $2}); }
    |           { $$ = 0; }
    ;

cmd:
    error ';'                                       { $$ = 0; reportSyntaxError("Invalid command."); }
    | error '}'                                       { $$ = 0; reportSyntaxError("Invalid command."); }

    | TK_IDENTIFIER '=' exp ';'                     { $$ = AST::createNode(AST_ASSIGN, {$3}, $1); }
    | TK_IDENTIFIER error ';'                     { $$ = 0; reportSyntaxError("Expected an assignment"); }
    | TK_IDENTIFIER '=' exp error                   { $$ = AST::createNode(AST_ASSIGN, {$3}, $1); reportSyntaxError("Expected \';\'"); }

    | TK_IDENTIFIER '[' exp ']' '=' exp ';'         { $$ = AST::createNode(AST_ASSIGN_INDEXED, {$3, $6}, $1); }
    | TK_IDENTIFIER '[' error ']' '=' exp ';'         { $$ = 0; reportSyntaxError("Invalid index expression."); }
    | TK_IDENTIFIER '[' exp ']' '=' exp error         { $$ = AST::createNode(AST_ASSIGN, {$3}, $1); reportSyntaxError("Expected \';\'"); }

    | KW_IF '(' exp ')' KW_THEN cmd %prec NO_ELSE           { $$ = AST::createNode(AST_IF, {$3, $6}); }
    | KW_IF error KW_THEN                                   { $$ = 0; reportSyntaxError("Invalid if statement"); }
    | KW_IF error KW_THEN cmd KW_ELSE cmd                   { $$ = 0; reportSyntaxError("Invalid if-else statement"); }
    | KW_IF '(' exp ')' KW_THEN cmd KW_ELSE cmd             { $$ = AST::createNode(AST_IF, {$3, $6, $8}); }

    | KW_WHILE '(' exp ')' cmd                      { $$ = AST::createNode(AST_WHILE, {$3, $5}); }
    | KW_WHILE error ')' cmd                        { $$ = 0; reportSyntaxError("Expected \("); }
    | KW_WHILE '(' error ')' cmd                    { $$ = 0; reportSyntaxError("Invalid while condition"); }
    | KW_WHILE error cmd                            { $$ = 0; reportSyntaxError("Invalid while statement"); }

    | KW_READ TK_IDENTIFIER ';'                     { $$ = AST::createNode(AST_READ, {}, $2); }
    | KW_READ error ';'                             { $$ = 0; reportSyntaxError("Expected an identifier."); }
    | KW_READ TK_IDENTIFIER error                   { $$ = AST::createNode(AST_READ, {}, $2); reportSyntaxError("Expected \';\'"); }

    | KW_PRINT lprint ';'                           { $$ = AST::createNode(AST_PRINT, {$2}); }
    | KW_PRINT error ';'                            { $$ = 0; reportSyntaxError("Expected a list of strings."); }
    | KW_PRINT lprint error                         { $$ = AST::createNode(AST_PRINT, {$2}); reportSyntaxError("Expected \';\'"); }

    | KW_RETURN exp ';'                             { $$ = AST::createNode(AST_RETURN, {$2}); }
    | KW_RETURN error ';'                           { $$ = 0; reportSyntaxError("Expected an expression."); }
    | KW_RETURN exp error                           { $$ = AST::createNode(AST_RETURN, {$2}); reportSyntaxError("Expected \';\'"); }

    | block
    | ';'                                           { $$ = 0; }
    ;

vectordef:
    type TK_IDENTIFIER '[' vectorsize ']'       { $$ = AST::createNode(AST_VECTORDEF, {$1, $4}, $2); }
    | vectordef_initialized
    ;

vectordef_initialized:
    type TK_IDENTIFIER '[' vectorsize ']' '=' lliteral          { $$ = AST::createNode(AST_VECTORDEF, {$1, $4, $7}, $2); }
    ;

lliteral:
    literal lliteral        { $$ = AST::createNode(AST_LLITERAL, {$1, $2}); }
    |                       { $$ = 0; }
    ;

vectorsize:
    LIT_INT         {$$ = AST::createNode(AST_SYM, {}, $1);}
    | LIT_CHAR      {$$ = AST::createNode(AST_SYM, {}, $1);}

literal:
    LIT_INT         {$$ = AST::createNode(AST_SYM, {}, $1);}
    | LIT_CHAR      {$$ = AST::createNode(AST_SYM, {}, $1);}
    | LIT_STRING    {$$ = AST::createNode(AST_SYM, {}, $1);}
    ;
    
lprint:
    elem lprint     {$$ = AST::createNode(AST_LPRINT, {$1, $2});}
    |               {$$ = 0;}
    ;

elem: LIT_STRING    {$$ = AST::createNode(AST_SYM, {}, $1);}
    | exp
    ;

exp:
    TK_IDENTIFIER  {$$ = AST::createNode(AST_SYM, {}, $1);}
    | indexed_exp
    | call_exp
    | expliteral

    | exp '+' exp   {$$ = AST::createNode(AST_ADD, {$1, $3}, nullptr, '+');}

    | exp '*' exp   {$$ = AST::createNode(AST_MUL, {$1, $3}, nullptr, '*');}

    | exp '/' exp   {$$ = AST::createNode(AST_DIV, {$1, $3}, nullptr, '/');}

    | exp '-' exp   {$$ = AST::createNode(AST_SUB, {$1, $3}, nullptr, '-');}

    | '~' exp       {$$ = AST::createNode(AST_NOT, {$2}, nullptr, '~');}

    | exp '&' exp   {$$ = AST::createNode(AST_AND, {$1, $3}, nullptr, '&');}

    | exp '|' exp   {$$ = AST::createNode(AST_OR, {$1, $3}, nullptr, '|');}

    | exp '>' exp   {$$ = AST::createNode(AST_BIG, {$1, $3}, nullptr, '>');}

    | exp '<' exp   {$$ = AST::createNode(AST_LES, {$1, $3}, nullptr, '<');}

    | exp '=' exp   {$$ = AST::createNode(AST_EQ, {$1, $3}, nullptr, '=');}

    | '(' exp ')'   { $$ = $2; }
    ;

expliteral:
    LIT_CHAR            {$$ = AST::createNode(AST_SYM, {}, $1);}
    | LIT_INT           {$$ = AST::createNode(AST_SYM, {}, $1);}
    ;

indexed_exp:
    TK_IDENTIFIER '[' exp ']'       { $$ = AST::createNode(AST_IND, { $3 }, $1); }
    | TK_IDENTIFIER error exp ']'   { $$ = AST::createNode(AST_IND, { $3 }, $1); reportSyntaxError("Expected ["); }
    | TK_IDENTIFIER '[' error ']'   { $$ = 0; reportSyntaxError("Expected an expression for the index"); }
    | TK_IDENTIFIER '[' exp error   { $$ = AST::createNode(AST_IND, { $3 }, $1); reportSyntaxError("Expected ]"); }
    ;

call_exp:
    TK_IDENTIFIER '(' lexp ')'      { $$ = AST::createNode(AST_CALL, { $3 }, $1); }
    ;

lexp: exp commalexp_tail { $$ = AST::createNode(AST_LEXP, {$1, $2}); }
    | { $$ = 0; }
    ;

commalexp_tail:
    ',' exp commalexp_tail          { $$ = AST::createNode(AST_LEXP, {$2, $3}); }
    | error exp commalexp_tail      { $$ = AST::createNode(AST_LEXP, {$2, $3}); reportSyntaxError("Expected ,"); }
    | { $$ = 0; }
    ;

type:   KW_INT      { $$ = AST::createNode(AST_TYPEINT, {}); }
        |KW_CHAR    { $$ = AST::createNode(AST_TYPECHAR, {}); }
    
%%

int yyerror(std::string msg)
{
    areThereSyntaxErrors = true;
    fprintf(stderr, "Error (%s) at line %d.\n", msg.c_str(), getLineNumber());
    return 0;
}