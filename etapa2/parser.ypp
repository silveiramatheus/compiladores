%{
    // UFRGS - Compiladores - Professor Marcelo Johann - 2024/2
    // Matheus Silveira e Tiago Binz
    // Etapa 2

    #include <string>
    #include "symbols.hpp"

    int yylex();
    int yyerror(string msg);
    extern int getLineNumber();

%}

%token KW_CHAR         
%token KW_INT           
%token KW_IF             
%token KW_THEN           
%token KW_ELSE           
%token KW_WHILE          
%token KW_READ           
%token KW_PRINT          
%token KW_RETURN         
%token TK_IDENTIFIER     
%token LIT_INT           
%token LIT_CHAR          
%token LIT_STRING        
%token TOKEN_ERROR     

%left '&' '|'
%left '<' '>' '='
%left '+' '-'
%left '*' '/'
%left '˜'

%nonassoc NO_ELSE
%nonassoc KW_ELSE
%%

program: ldefs
    ;

ldefs: def ldefs
    |
    ;

def: vardef
    | functiondef
    ;

vardef: KW_INT TK_IDENTIFIER '=' literal ';'
    | KW_CHAR TK_IDENTIFIER '=' literal ';'
    | vectordef ';'
    ;

functiondef: KW_INT TK_IDENTIFIER '(' lparameter ')' block
    | KW_CHAR TK_IDENTIFIER '(' lparameter ')' block
    ;

lparameter: param paramstail
    | 
    ;

param: KW_INT TK_IDENTIFIER
    | KW_CHAR TK_IDENTIFIER
    ;

paramstail: ',' param lparameter
    |
    ;

block: '{' lcmd '}'
    ;

lcmd: cmd lcmd 
    |
    ;

cmd: TK_IDENTIFIER '=' exp ';'
    | TK_IDENTIFIER '[' exp ']' '=' exp ';' 
    | KW_IF '(' exp ')' KW_THEN cmd %prec NO_ELSE
    | KW_IF '(' exp ')' KW_THEN cmd KW_ELSE cmd 
    | KW_WHILE '(' exp ')' cmd
    | KW_READ TK_IDENTIFIER ';'
    | KW_PRINT lprint ';'
    | KW_RETURN exp ';'
    | block 
    | ';'
    ;

vectordef: KW_INT TK_IDENTIFIER '[' LIT_INT ']' 
    | KW_CHAR TK_IDENTIFIER '[' LIT_INT ']'
    | KW_INT TK_IDENTIFIER '[' LIT_INT ']' '=' lliteral
    | KW_CHAR TK_IDENTIFIER '[' LIT_INT ']' '=' lliteral
    ;

lliteral: literal lliteral 
    | literal 
    ; 

literal: LIT_INT 
    | LIT_CHAR
    ;

lprint: LIT_STRING lprint_tail              
    | exp lprint_tail                       
    ;

lprint_tail: LIT_STRING lprint_tail         
    | exp lprint_tail                       
    |                                      
    ;

exp: TK_IDENTIFIER 
    | indexed_exp
    | call_exp
    | literal
    | exp '+' exp
    | exp '*' exp
    | exp '/' exp
    | exp '-' exp
    | exp '˜' exp
    | exp '&' exp 
    | exp '|' exp
    | exp '>' exp 
    | exp '<' exp 
    | exp '=' exp
    ;

indexed_exp: TK_IDENTIFIER '[' exp ']'
           ;

call_exp: TK_IDENTIFIER '(' commalexp ')'
        ;

commalexp: exp ',' commalexp
    | exp
    ;

%%

int yyerror(std::string msg)
{
    fprintf(stderr, "Error: %s\nLine: %d\n", msg.c_str(), getLineNumber());
    exit(3);
}