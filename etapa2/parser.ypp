%{
    // UFRGS - Compiladores - Professor Marcelo Johann - 2024/2
    // Matheus Silveira e Tiago Binz
    // Etapa 2

    #include <string>
    #include "symbols.hpp"

    int yylex();
    int yyerror(string msg);
    extern int getLineNumber();

%}

%token KW_CHAR         
%token KW_INT           
%token KW_IF             
%token KW_THEN           
%token KW_ELSE           
%token KW_WHILE          
%token KW_READ           
%token KW_PRINT          
%token KW_RETURN         
%token TK_IDENTIFIER     
%token LIT_INT           
%token LIT_CHAR          
%token LIT_STRING        
%token TOKEN_ERROR     

%left '&' '|'
%left '<' '>' '='
%left '+' '-'
%left '*' '/'
%left '~'

%nonassoc NO_ELSE
%nonassoc KW_ELSE
%%

program: ldefs
    ;

ldefs: def ldefs    
    |   
    ;

def: vardef
    | functiondef
    ;

vardef: type TK_IDENTIFIER '=' exp ';'   
    | vectordef ';'
    ;

functiondef: type TK_IDENTIFIER '(' lparameter ')' block 
    ;

lparameter: param paramstail    
    |                           
    ;

param: type TK_IDENTIFIER   
    ;

paramstail: ',' lparameter    
    |                         
    ;

block: '{' lcmd '}' 
    ;

lcmd: cmd lcmd  
    |           
    ;

cmd: TK_IDENTIFIER '=' exp ';'                      
    | TK_IDENTIFIER '[' exp ']' '=' exp ';'         
    | KW_IF '(' exp ')' KW_THEN cmd %prec NO_ELSE   
    | KW_IF '(' exp ')' KW_THEN cmd KW_ELSE cmd     
    | KW_WHILE '(' exp ')' cmd                      
    | KW_READ TK_IDENTIFIER ';'                     
    | KW_PRINT lprint ';'                           
    | KW_RETURN exp ';'                             
    | block
    | ';'                                           
    ;

vectordef: type TK_IDENTIFIER '[' vectorsize ']'
    | vectordef_initialized
    ;

vectordef_initialized: type TK_IDENTIFIER '[' vectorsize ']' '=' lliteral
    ;

lliteral: literal lliteral
    |
    ;

vectorsize: LIT_INT
            | LIT_CHAR

literal: intliteral
    | LIT_CHAR
    | LIT_STRING
    ;

intliteral: LIT_INT
    
lprint: elem lprint
    |
    ;

elem: LIT_STRING
    | exp
    ;

exp: TK_IDENTIFIER
    | indexed_exp
    | call_exp
    | expliteral
    | exp '+' exp
    | exp '*' exp
    | exp '/' exp
    | exp '-' exp
    | '~' exp
    | exp '&' exp
    | exp '|' exp
    | exp '>' exp
    | exp '<' exp
    | exp '=' exp
    | '(' exp ')'
    ;

expliteral: LIT_CHAR
    | LIT_INT
    ;

indexed_exp: TK_IDENTIFIER '[' exp ']'
    ;

call_exp: TK_IDENTIFIER '(' lexp ')'
    ;

lexp: exp commalexp_tail
    |
    ;

commalexp_tail: ',' exp commalexp_tail  
    |
    ;

type:   KW_INT
        |KW_CHAR
    
%%

int yyerror(std::string msg)
{
    fprintf(stderr, "Error: %s (Line: %d)\n", msg.c_str(), getLineNumber());
    exit(3);
}